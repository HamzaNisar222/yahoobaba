1 DATABASE 
VARIABLES IN .env
DB_CONNECTION=mysql/pgsql


we can use different drivers for different databases
mysql
pgsql
by default its also set in the config/database.php

FOR CREATING TABLES WE USE MIGRATION FILES IN MIGRATION FOLDER
for creating tables in core php we write raw queries to create table butt in laravel
we use migration files to create tables
COMMANDS
php artisan make:migration filname

everything is done by running the command
return new class etends MIgration{
    public function up():void{
         Schema(CLASS)::create{METHOD}('students',function(Blueprint{CLASS for datatypes} $table){
             //then we work in this function 
             $table->id(){This is a method whoch makes id a primary key};
             $table->string('name',30){string is also a method which is defined in Blueprint class to give datatype VARCHAR};
         })
    }  
}
after definign the table in the above function we run a command 

php artisan migrate //This creates the table in the database

BENIFITS WHEN WE SWITCH THE DEVELOPER FOR SAME PROOJECT IT WILL NOT BE PROBLAMATIC FOR YOU TO DO ANYTHING 



COMMANDS
1 php artisan make:migration create_students_table //for making a migration file for creating a table in database
2 php artisan migrate //This creates the table in the database by running migration files
2 php artisan migrate:status //status of the migration files either ran or NOT
3 php artisan migrate --force //to forcefully migrate a new file on production side
4 php artisan migrate:rollback --step=3(last three migrations) --batch=3(if from a batch we need to remove effects of 3)//for reversing the recent migration we ran 
5 php artisan migrate:reset //for removing all the tables from database except from default migrations table 
6 php artisan migrate:refresh //for rolling back all the tables from and again create it
7 php artisan migrate:fresh //for droping all the tables from and again create it
8 php artisan make:model Task -m //for making a model and create a migration file for it as well 
